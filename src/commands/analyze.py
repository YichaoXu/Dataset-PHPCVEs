"""
Analyze command module for PHP CVE Dataset Collection Tool.

This module provides functionality to analyze collected CVE data and
generate insights.
"""

import os
import time
from pathlib import Path
from typing import Optional, List
import typer
from rich.console import Console

from src.utils.logger import Logger
from src.utils.file_utils import ensure_dir, read_csv_file, write_json_file
from src.utils.ui import ProgressUI, print_table
from src.config import config

console = Console()

def analyze(
    input_file: Path = typer.Argument(..., help="Path to CSV file generated by collect command"),
    output_dir: Path = typer.Option(Path("analysis"), help="Directory to store analysis results"),
    cwe_filter: Optional[List[str]] = typer.Option(None, help="Filter by CWE IDs (e.g. 79,89)"),
    project_filter: Optional[List[str]] = typer.Option(None, help="Filter by project types"),
    year_range: Optional[List[int]] = typer.Option(None, help="Filter by year range (e.g. 2020,2022)"),
    verbose: bool = typer.Option(False, help="Enable verbose output")
):
    """
    Analyze collected CVE data to generate insights.
    
    This command analyzes the collected CVE data to generate statistics and insights
    about CWE types, project types, and their distributions over time.
    """
    # Enable verbose logging if requested
    Logger.set_verbose(verbose)
    
    # Start timing
    start_time = time.time()
    
    # Create output directory
    ensure_dir(output_dir)
    
    # Read input file
    Logger.info(f"Reading input file: {input_file}")
    records = read_csv_file(input_file)
    
    if not records:
        Logger.error("No records found in input file")
        raise typer.Exit(1)
    
    # Apply filters
    filtered_records = _apply_filters(records, cwe_filter, project_filter, year_range)
    
    Logger.info(f"Analyzing {len(filtered_records)} records")
    
    # Generate analysis
    analysis_results = {
        "total_records": len(filtered_records),
        "cwe_distribution": _analyze_cwe_distribution(filtered_records),
        "project_type_distribution": _analyze_project_types(filtered_records),
        "yearly_distribution": _analyze_yearly_distribution(filtered_records),
        "top_repositories": _analyze_top_repositories(filtered_records)
    }
    
    # Save analysis results
    results_file = output_dir / "analysis_results.json"
    write_json_file(analysis_results, results_file)
    Logger.success(f"Analysis results saved to {results_file}")
    
    # Display summary
    _display_analysis_summary(analysis_results)
    
    # Report timing
    elapsed_time = time.time() - start_time
    Logger.info(f"Analysis completed in {elapsed_time:.2f} seconds")
    
    return analysis_results

def _apply_filters(records, cwe_filter, project_filter, year_range):
    """Apply filters to records."""
    filtered_records = records.copy()
    
    # Filter by CWE ID
    if cwe_filter:
        cwe_ids = [f"CWE-{cwe}" if not cwe.startswith("CWE-") else cwe for cwe in cwe_filter]
        filtered_records = [r for r in filtered_records if r.get("cwe_id") in cwe_ids]
        Logger.info(f"Filtered to {len(filtered_records)} records with CWE IDs: {', '.join(cwe_ids)}")
    
    # Filter by project type
    if project_filter:
        filtered_records = [r for r in filtered_records if r.get("project_type") in project_filter]
        Logger.info(f"Filtered to {len(filtered_records)} records with project types: {', '.join(project_filter)}")
    
    # Filter by year range
    if year_range and len(year_range) == 2:
        start_year, end_year = year_range
        filtered_records = [
            r for r in filtered_records 
            if r.get("cve_id", "").startswith(f"CVE-") and 
            start_year <= int(r.get("cve_id", "CVE-0000-0000").split("-")[1]) <= end_year
        ]
        Logger.info(f"Filtered to {len(filtered_records)} records from years {start_year}-{end_year}")
    
    return filtered_records

def _analyze_cwe_distribution(records):
    """Analyze CWE distribution."""
    cwe_counts = {}
    for record in records:
        cwe_id = record.get("cwe_id", "Unknown")
        cwe_counts[cwe_id] = cwe_counts.get(cwe_id, 0) + 1
    
    # Sort by count (descending)
    return dict(sorted(cwe_counts.items(), key=lambda x: x[1], reverse=True))

def _analyze_project_types(records):
    """Analyze project type distribution."""
    project_counts = {}
    for record in records:
        project_type = record.get("project_type", "Unknown")
        project_counts[project_type] = project_counts.get(project_type, 0) + 1
    
    # Sort by count (descending)
    return dict(sorted(project_counts.items(), key=lambda x: x[1], reverse=True))

def _analyze_yearly_distribution(records):
    """Analyze yearly distribution."""
    yearly_counts = {}
    for record in records:
        cve_id = record.get("cve_id", "")
        if cve_id.startswith("CVE-"):
            parts = cve_id.split("-")
            if len(parts) >= 2:
                year = parts[1]
                yearly_counts[year] = yearly_counts.get(year, 0) + 1
    
    # Sort by year
    return dict(sorted(yearly_counts.items()))

def _analyze_top_repositories(records):
    """Analyze top repositories."""
    repo_counts = {}
    for record in records:
        repo = record.get("repository", "")
        if repo:
            repo_counts[repo] = repo_counts.get(repo, 0) + 1
    
    # Sort by count (descending) and take top 10
    return dict(sorted(repo_counts.items(), key=lambda x: x[1], reverse=True)[:10])

def _display_analysis_summary(analysis_results):
    """Display analysis summary."""
    console.print("\n[bold]Analysis Summary[/bold]")
    console.print(f"Total records: {analysis_results['total_records']}")
    
    # Display CWE distribution
    console.print("\n[bold]Top CWE Types:[/bold]")
    cwe_rows = []
    for cwe_id, count in list(analysis_results["cwe_distribution"].items())[:10]:
        percentage = (count / analysis_results["total_records"]) * 100
        cwe_rows.append([cwe_id, count, f"{percentage:.1f}%"])
    
    print_table(["CWE ID", "Count", "Percentage"], cwe_rows)
    
    # Display project type distribution
    console.print("\n[bold]Project Type Distribution:[/bold]")
    project_rows = []
    for project_type, count in analysis_results["project_type_distribution"].items():
        percentage = (count / analysis_results["total_records"]) * 100
        project_rows.append([project_type, count, f"{percentage:.1f}%"])
    
    print_table(["Project Type", "Count", "Percentage"], project_rows)
    
    # Display yearly distribution
    console.print("\n[bold]Yearly Distribution:[/bold]")
    yearly_rows = []
    for year, count in analysis_results["yearly_distribution"].items():
        percentage = (count / analysis_results["total_records"]) * 100
        yearly_rows.append([year, count, f"{percentage:.1f}%"])
    
    print_table(["Year", "Count", "Percentage"], yearly_rows) 